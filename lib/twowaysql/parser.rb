#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/twowaysql/parser.y".
#

require 'racc/parser'


module TwoWaySQL

  class Parser < Racc::Parser

module_eval <<'..end lib/twowaysql/parser.y modeval..idd394674cd0', 'lib/twowaysql/parser.y', 126

require 'strscan'

def initialize(opts={})
  opts = {
    :debug => true,
    :preserve_space => true,
    :preserve_comment => true,
    :preserve_eol => true
  }.merge(opts)
  @yydebug = opts[:debug]
  @preserve_space = opts[:preserve_space]
  @preserve_comment = opts[:preserve_comment]
  @preserve_eol = opts[:preserve_eol]
  @num_questions = 0
end

BEGIN_SUBSTITUTION          = '(\/|\#)\*([^\*]+)\*\1'
PAREN_EXAMPLE             = '\([^\)]+\)'
SUBSTITUTION_PATTERN        = /\A#{BEGIN_SUBSTITUTION}\s*/
PAREN_SUBSTITUTION_PATTERN  = /\A#{BEGIN_SUBSTITUTION}\s*#{PAREN_EXAMPLE}/

CONDITIONAL_PATTERN   = /\A(\/|\#)\*(IF)\s+([^\*]+)\s*\*\1/
BEGIN_END_PATTERN     = /\A(\/|\#)\*(BEGIN|END)\s*\*\1/
COMMENT_PATTERN       = /\A(\/|\#)\*\s+(.+)\s*\*\1/  ## start with spaces
QUOTED_STRING_PATTERN = /\A(\'(?:[^\']+|\'\')*\')/   ## quoted string
SPLIT_TOKEN_PATTERN   = /\A(\S+?)(?=\s*(?:(?:\/|\#)\*|-{2,}|\(|\)|\,))/  ## stop on delimiters --,/*,#*,',',(,)
ELSE_PATTERN          = /\A\-{2,}\s*ELSE\s*/
AND_PATTERN           = /\A(\s*AND\s+)/
OR_PATTERN            = /\A(\s*OR\s+)/
LITERAL_PATTERN       = /\A([^;\s]+)/
SPACES_PATTERN        = /\A(\s+)/
QUESTION_PATTERN      = /\A\?/
COMMA_PATTERN         = /\A\,/
LPAREN_PATTERN        = /\A\(/
RPAREN_PATTERN        = /\A\)/
SEMICOLON_AT_INPUT_END_PATTERN  = /\A\;\s*\Z/
UNMATCHED_COMMENT_START_PATTERN = /\A(?:(?:\/|\#)\*)/


def parse( io )
  @q = []
  io.each do |line|
    s = StringScanner.new(line.rstrip)
    until s.eos? do
      case
      when s.scan(AND_PATTERN)
        @q.push [ :AND, s[1] ]
      when s.scan(OR_PATTERN)
        @q.push [ :OR, s[1] ]
      when s.scan(SPACES_PATTERN)
        @q.push [ :SPACES, s[1] ] if @preserve_space
      when s.scan(QUESTION_PATTERN)
        @q.push [ :QUESTION, nil ]
      when s.scan(COMMA_PATTERN)
        @q.push [ :COMMA, ',' ]
      when s.scan(LPAREN_PATTERN)
        @q.push [ :LPAREN, '(' ]
      when s.scan(RPAREN_PATTERN)
        @q.push [ :RPAREN, ')' ]
      when s.scan(ELSE_PATTERN)
        @q.push [ :ELSE, nil ]
      when s.scan(COMMENT_PATTERN)
        @q.push [ :REAL_COMMENT, s[2] ] if @preserve_comment
      when s.scan(BEGIN_END_PATTERN)
        @q.push [ s[2].intern, nil ]
      when s.scan(CONDITIONAL_PATTERN)
        @q.push [ s[2].intern, s[3] ]
      when s.scan(PAREN_SUBSTITUTION_PATTERN)
        @q.push [ :PAREN_SUBSTITUTION, s[2] ]
      when s.scan(SUBSTITUTION_PATTERN)
        @q.push [ :SUBSTITUTION, s[2] ]
      when s.scan(QUOTED_STRING_PATTERN)
        @q.push [ :QUOTED, s[1] ]
      when s.scan(SPLIT_TOKEN_PATTERN)
        @q.push [ :CHARS, s[1] ]
      when s.scan(UNMATCHED_COMMENT_START_PATTERN)   ## unmatched comment start, '/*','#*'
        raise Racc::ParseError, "## unmatched comment. cannot parse [#{s.rest}]"
      when s.scan(LITERAL_PATTERN)   ## other string token
        @q.push [ :CHARS, s[1] ]
      when s.scan(SEMICOLON_AT_INPUT_END_PATTERN)
        #drop semicolon at input end
      else
        raise Racc::ParseError, "## cannot parse [#{s.rest}]"
      end
    end
      
    @q.push [ :EOL, nil ] if @preserve_eol
  end
    
  @q.push [ false, nil ]
    
  ## cal racc's private parse method
  do_parse
end

def next_token
  @q.shift
end
..end lib/twowaysql/parser.y modeval..idd394674cd0

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 20, :_reduce_1,
 0, 21, :_reduce_2,
 2, 21, :_reduce_3,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 3, 26, :_reduce_7,
 4, 27, :_reduce_8,
 2, 28, :_reduce_9,
 0, 28, :_reduce_10,
 2, 24, :_reduce_11,
 2, 25, :_reduce_12,
 1, 22, :_reduce_13,
 1, 22, :_reduce_14,
 1, 22, :_reduce_15,
 1, 22, :_reduce_16,
 1, 22, :_reduce_17,
 1, 22, :_reduce_18,
 1, 22, :_reduce_19,
 1, 22, :_reduce_20,
 1, 22, :_reduce_21,
 1, 22, :_reduce_22,
 1, 22, :_reduce_23,
 1, 22, :_reduce_none,
 1, 22, :_reduce_none,
 1, 22, :_reduce_none,
 2, 29, :_reduce_27,
 3, 29, :_reduce_28,
 2, 29, :_reduce_29,
 3, 29, :_reduce_30,
 1, 29, :_reduce_31 ]

racc_reduce_n = 32

racc_shift_n = 43

racc_action_table = [
     8,    35,    12,    42,    16,    19,    20,    21,    22,     4,
     6,     7,     9,    11,    14,    15,    17,     8,    23,    12,
     3,    16,    19,    20,    21,    22,     4,     6,     7,     9,
    11,    14,    15,    17,     8,   nil,    12,   nil,    16,    19,
    20,    21,    22,     4,     6,     7,     9,    11,    14,    15,
    17,     8,   nil,    12,   nil,    16,    19,    20,    21,    22,
     4,     6,     7,     9,    11,    14,    15,    17,     8,    34,
    12,   nil,    16,    19,    20,    21,    22,     4,     6,     7,
     9,    11,    14,    15,    17,    31,    32,    33,    28,    29,
    28,    29,    39,    40 ]

racc_action_check = [
    38,    25,    38,    36,    38,    38,    38,    38,    38,    38,
    38,    38,    38,    38,    38,    38,    38,     2,     3,     2,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    37,   nil,    37,   nil,    37,    37,
    37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
    37,    30,   nil,    30,   nil,    30,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    24,    24,
    24,   nil,    24,    24,    24,    24,    24,    24,    24,    24,
    24,    24,    24,    24,    24,    15,    15,    15,    35,    35,
    12,    12,    33,    33 ]

racc_action_pointer = [
   nil,    20,    15,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    84,   nil,   nil,    77,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    66,    -4,   nil,   nil,   nil,   nil,
    49,   nil,   nil,    84,   nil,    82,     0,    32,    -2,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -2,   -32,    -1,   -32,   -18,    -3,   -19,   -20,    -2,   -21,
   -26,   -22,    -2,   -25,   -23,   -32,   -15,   -31,   -24,   -16,
   -13,   -14,   -17,    43,   -32,   -10,    -4,    -5,    -2,    -2,
    -6,   -29,   -27,   -32,    -7,    -2,   -32,   -11,   -12,   -30,
   -28,    -9,    -8 ]

racc_goto_table = [
     2,    25,     1,    36,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,    37,    38 ]

racc_goto_check = [
     2,     4,     1,     9,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,   -11,   nil,   nil,   nil,   nil,   -22,
   nil ]

racc_goto_default = [
   nil,   nil,    30,     5,   nil,    26,    27,    10,    13,   nil,
    18 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :BEGIN => 2,
 :END => 3,
 :IF => 4,
 :ELSE => 5,
 :AND => 6,
 :OR => 7,
 :CHARS => 8,
 :QUOTED => 9,
 :SPACES => 10,
 :COMMA => 11,
 :LPAREN => 12,
 :RPAREN => 13,
 :QUESTION => 14,
 :REAL_COMMENT => 15,
 :EOL => 16,
 :SUBSTITUTION => 17,
 :PAREN_SUBSTITUTION => 18 }

racc_use_result_var = true

racc_nt_base = 19

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'BEGIN',
'END',
'IF',
'ELSE',
'AND',
'OR',
'CHARS',
'QUOTED',
'SPACES',
'COMMA',
'LPAREN',
'RPAREN',
'QUESTION',
'REAL_COMMENT',
'EOL',
'SUBSTITUTION',
'PAREN_SUBSTITUTION',
'$start',
'sql',
'stmt_list',
'stmt',
'sub_stmt',
'and_stmt',
'or_stmt',
'begin_stmt',
'if_stmt',
'else_stmt',
'substitution']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 8
  def _reduce_1( val, _values, result )
                  result = RootNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 13
  def _reduce_2( val, _values, result )
                  result = []
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 17
  def _reduce_3( val, _values, result )
                  result.push val[1]
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 26
  def _reduce_7( val, _values, result )
                  result = BeginNode.new( val[1] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 31
  def _reduce_8( val, _values, result )
                  result = IfNode.new( val[0], val[1], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 36
  def _reduce_9( val, _values, result )
                  result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 40
  def _reduce_10( val, _values, result )
                  result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 45
  def _reduce_11( val, _values, result )
                  result = SubStatementNode.new( val[0], val[1] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 50
  def _reduce_12( val, _values, result )
                  result = SubStatementNode.new( val[0], val[1] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 55
  def _reduce_13( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 59
  def _reduce_14( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 63
  def _reduce_15( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 67
  def _reduce_16( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 71
  def _reduce_17( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 75
  def _reduce_18( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 79
  def _reduce_19( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 83
  def _reduce_20( val, _values, result )
                  result = LiteralNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 88
  def _reduce_21( val, _values, result )
                  @num_questions += 1
                  result = QuestionNode.new( @num_questions )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 92
  def _reduce_22( val, _values, result )
                  result = CommentNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 96
  def _reduce_23( val, _values, result )
                  result = EolNode.new
   result
  end
.,.,

 # reduce 24 omitted

 # reduce 25 omitted

 # reduce 26 omitted

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 104
  def _reduce_27( val, _values, result )
                  result = SubstitutionNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 108
  def _reduce_28( val, _values, result )
                  result = SubstitutionNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 112
  def _reduce_29( val, _values, result )
                  result = SubstitutionNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 116
  def _reduce_30( val, _values, result )
                  result = SubstitutionNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'lib/twowaysql/parser.y', 120
  def _reduce_31( val, _values, result )
                  result = ParenSubstitutionNode.new( val[0] )
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser

end   # module TwoWaySQL
